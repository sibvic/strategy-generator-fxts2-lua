using ProfitRobots.StrategyGenerator.Model;
using ProfitRobots.StrategyGenerator.Lua.Implementation;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace ProfitRobots.StrategyGenerator.Lua
{
    /// <summary>
    /// Generates lua strategy code for the FXCM platform.
    /// </summary>
    public class StrategyGenerator : IStrategyGenerator
    {
        private readonly IModuleProvider _moduleProvider;

        public StrategyGenerator(IModuleProvider moduleProvider)
        {
            _moduleProvider = moduleProvider;
        }

        public string Generate(MetaModel model)
        {
            var factory = new PrimitiveFactory();
            var code = new CodeBlock();
            code.Add(GenerateHeader())
                .Add(InitMethodGenerator.GenerateCode(model))
                .Add(VariablesGenerator.GenerateCode(model))
                .Add(PrepareMethodGenerator.GenerateCode(model))
                .Add(new EntryFunctionGenerator(model, factory).Generate())
                .Add(GenerateRoutines())
                .Add(GenerateModules(model));
            return code.ToCode();
        }

        public string GenerateFileName(string strategyName)
        {
            return Path.GetInvalidFileNameChars().Aggregate(strategyName, (current, c) => current.Replace(c.ToString(), string.Empty)) + ".lua";
        }

        private static IPrimitive GenerateRoutines()
        {
            return new CodeBlock()
                .Add("function ExtUpdate(id, source, period) for _, module in pairs(Modules) do if module.BlockTrading ~= nil and module:BlockTrading(id, source, period) then return; end end for _, module in pairs(Modules) do if module.ExtUpdate ~= nil then module:ExtUpdate(id, source, period); end end end")
                .Add("function ReleaseInstance() for _, module in pairs(Modules) do if module.ReleaseInstance ~= nil then module:ReleaseInstance(); end end end")
                .Add("function ExtAsyncOperationFinished(cookie, success, message, message1, message2) for _, module in pairs(Modules) do if module.AsyncOperationFinished ~= nil then module:AsyncOperationFinished(cookie, success, message, message1, message2); end end end")
                .Add("dofile(core.app_path() .. \"\\\\strategies\\\\standard\\\\include\\\\helper.lua\");");
        }

        private IPrimitive GenerateModules(MetaModel model)
        {
            var code = new CodeBlock();
            if (model.Modules?.Count > 0)
            {
                foreach (var module in model.Modules)
                {
                    foreach (var line in _moduleProvider.GetCode(module.Name))
                    {
                        code.Add(line);
                    }
                    if (model.Debug)
                        code.Add($"{module.Name}.Debug = true;");
                    foreach (var param in module.Parameters)
                    {
                        string valueStr = FormatParameterValue(param);
                        code.Add($"{module.Name}.{param.Id} = {valueStr};");
                    }
                    code.Add($"{module.Name}:RegisterModule(Modules);");
                }
            }
            return code;
        }

        private static string FormatParameterValue(IParameter param)
        {
            switch (param)
            {
                case BoolParameter boolParam:
                    return boolParam.Value ? "true" : "false";
                case IntParameter intParam:
                    return intParam.Value.ToString();
                case StringParameter stringParam:
                    return $"\"{stringParam.Value}\"";
                case ExternalParameter externalParam:
                    IEnumerable<string> parameterValues = ValuesParser.GetParams(externalParam.Value);
                    return ValueFormatter.ReplaceValues(externalParam.Value, parameterValues, "instance.parameters.{0}");
            }
            throw new NotSupportedException();
        }

        private static IPrimitive GenerateHeader()
        {
            return new CodeBlock()
                .Add("--+------------------------------------------------------------------+")
                .Add("--|                    Generated by Profit Robots strategy generator |")
                .Add("--|                                          http://profitrobots.com |")
                .Add("--+------------------------------------------------------------------+")
                .Add("local Modules = {};");
        }
    }
}
